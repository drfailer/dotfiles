#!/bin/bash

###############################################################################
# TITLE: note
# AUTHOR: drfailer
# DATE: Sat Mar  4 08:30:22 PM CET 2023
# DESCRIPTION: Simple note taking system using dmenu
# REQUIREMENTS: dmenu, pandoc
###############################################################################

set -euo pipefail

###############################################################################
# Global variables:
###############################################################################
# Global variable for the note directory
NOTE_DIR="$HOME/.local/share/notes"
SRC_DIR="$NOTE_DIR/src"
IMG_DIR="$NOTE_DIR/img"
BUILD_DIR="$NOTE_DIR/build"

# editor command (can be change to anything)
EDITOR_CMD="nvim"
if [[ $NOTE_MENU == "dmenu" ]]; then
  EDITOR_CMD="alacritty -e nvim" # run alacritty when not used in the terminal
fi

# Global variable for tag and file (not const):
tag=""
file=""

###############################################################################
# Help message:
###############################################################################
displayHelpMessage() {
cat << ENDOFMESSAGE
Usage: note <option>

Available options:
  -e, edit      launch the app in edit mode
  -r, read      launch the app in read mode
  -a, add       add notes or images
  -i, img       insert an image from the image directory
  -h, --help    display help message

Notes:
* If the app is launched without any option, it automatically startup in read
  mode.
* With the `noexport`, the script will not generate a pdf for the current note.
ENDOFMESSAGE
}

###############################################################################
# Menu functions:
###############################################################################
dmenu_select() {
  dmenu -i -l 20 -p "$1"
}

dmenu_confirm() {
  printf "no\nyes\n" | dmenu -p "$1"
}

# using fzf to select notes doesn't allow to create new notes / tags
fzf_select() {
  fzf --prompt="$1" --height 40% --reverse
}

fzf_confirm() {
  printf "no\nyes\n" | fzf_select "$1"
}

select_function() {
  if [[ $NOTE_MENU == "dmenu" ]]; then
    dmenu_select "$1"
  else
    fzf_select "$1"
  fi
}

confirm_function() {
  if [[ $NOTE_MENU == "dmenu" ]]; then
    dmenu_confirm "$1"
  else
    fzf_confirm "$1"
  fi
}

###############################################################################
# Utilis functions:
###############################################################################

createDirectory() {
  if [[ ! -d $1 ]]; then
    mkdir -p $1
  fi
}

readTag() {
  tag=$(ls $1 | select_function "Chose a Tag: ")
}

readTopic() {
  file=$(ls $1 | sed -e 's/.pdf//g' | select_function "Chose a Topic: ")
}

removeNote() {
  resp=$(confirm_function 'confirme deletion: ')
  if [[ $resp == "yes" ]]; then
    if [[ $1 =~ \.md ]]; then
      # remove markdown and pdf file
      rm "$SRC_DIR/$1"
      rm "$BUILD_DIR/$(echo "$1" | sed -e 's/\.md/\.pdf/g')"
    else
      rm -rf "$SRC_DIR/$1"
      rm -rf "$BUILD_DIR/$1"
      rm -rf "$IMG_DIR/$1"
    fi
  fi
}

# Tag selection (directory):
choseTag() {
  tag=$(printf "$(ls $SRC_DIR)\nremove-mode\n" | select_function "Select a Tag: ")
  path="$SRC_DIR/$tag"
  if [[ $tag != '' && $tag != "remove-mode" ]]; then
    createDirectory "$BUILD_DIR/$tag"  # create directory in build
    createDirectory "$IMG_DIR/$tag"    # create directory in img
    createDirectory $path              # create directory in src
  elif [[ $tag == "remove-mode" ]]; then
    toremove=$(ls $SRC_DIR | select_function "! remove-mode: ")
    if [[ $toremove != '' ]]; then
      removeNote $toremove
    fi
  fi
}


# Topic selection (markdown file):
choseTopic() {
  topic=$(printf "$(ls "$SRC_DIR/$1")\nremove-mode\n" | sed -e 's/\.md//g' | select_function "Select a Topic: ")
  if [[ $topic != '' && $topic != "remove-mode" ]]; then
    file="$topic.md"
    if [[ ! -f "$SRC_DIR/$1/$file" ]]; then
      touch "$SRC_DIR/$1/$file"
cat << EOF > "$SRC_DIR/$1/$file"
---
title: $(echo "$topic" | sed -e 's/.*/\u&/g' | sed -e 's/_/ /g')
author: $USER
tag: [$tag, noexport]
---
EOF
    fi
  elif [[ $topic == "remove-mode" ]]; then
    toremove=$(ls "$SRC_DIR/$1" | select_function "! remove-mode: ")
    if [[ $toremove != '' ]]; then
      removeNote "$1/$toremove"
    fi
  fi
}

# use pandoc to create a pdf if required
compile() {
  if [[ -z $(grep "^tag: " "$SRC_DIR/$tag/$file" | grep "noexport") ]]; then
    srcFile="$SRC_DIR/$tag/$file"
    outFile=$(echo "$BUILD_DIR/$tag/$file" | sed -e 's/.md/.pdf/g')
    pandoc -V geometry:margin=1in -o $outFile $srcFile 2> /dev/null
  fi
}

# Function that handle edit mode (the app has been lauched using -e flag)
editNote() {
  choseTag
  if [[ $tag != "" && $tag != "remove-mode" ]]; then
    choseTopic $tag
  fi
  if [[ $file != "" && $file != "remove-mode" ]]; then
    $EDITOR_CMD "$SRC_DIR/$tag/$file" && compile
  fi
}

# Function that handle read mode (the app has been lauched using -r flag)
readNote() {
  readTag $BUILD_DIR
  if [[ ! -z $tag && -d  "$NOTE_DIR/build/$tag" ]]; then
    readTopic "$BUILD_DIR/$tag"
  fi
  if [[ ! -z $file && -f "$NOTE_DIR/build/$tag/$file.pdf" ]]; then
    zathura "$BUILD_DIR/$tag/$file.pdf"
  fi
}

# add notes or images
addNote() {
  # get files to add
  files=$@
  files=( "${files[@]/-a}" )

  # chose a tag
  readTag $BUILD_DIR
  if [[ ! -z $tag && $tag != "remove-mode" && ! -d  "$BUILD_DIR/$tag" ]]; then
    mkdir -p "$BUILD_DIR/$tag" # create directory in build
    mkdir -p "$IMG_DIR/$tag"   # create directory in img
    mkdir -p "$SRC_DIR/$tag"   # create directory in src
  fi
  for f in $files; do
    case $f in
      *.pdf)
        mv $f "$BUILD_DIR/$tag"
        ;;
      *.md)
        mv $f "$SRC_DIR/$tag"
        ;;
      *.png|*.jpg|*.jpeg)
        mv $f "$IMG_DIR/$tag"
        ;;
    esac
  done
}

# print out markdown statement to add a chosen image to a note
insertImg() {
  readTag $IMG_DIR
  if [[ ! -z $tag ]]; then
    img=$(ls "$IMG_DIR/$tag" | select_function "Chose image: ")
    if [[ ! -z $img ]]; then
      echo "![$img]($IMG_DIR/$tag/$img)"
    fi
  fi
}

###############################################################################
# Main function
###############################################################################

main() {
  if [ $# -eq 0 ]
  then
    readNote
  else
    case $1 in
      -e|edit|e)
        editNote
        ;;
      -r|read|r)
        readNote
        ;;
      -a|add|a)
        if [ $# -gt 1 ]; then
          addNote $@
        else
          echo "ERROR: you must specify a file to add."
        fi
        ;;
      -i|img|i)
        insertImg
        ;;
      -h | --help)
        displayHelpMessage
        ;;
      *)
        echo "Unknown option, try to use --help flag for more info."
        ;;
    esac
  fi
}

# Call main function
main $@
